import os
import sys
import shutil
import socket
import subprocess
from InquirerPy import inquirer
from rich.console import Console
from rich.panel import Panel
from modules.utils.db_utils import MariaDBManager
from modules.utils.logger import log
from modules.utils.pterodactyl_utils import (
    check_root, check_dependency, check_port, download_and_extract_panel,
    generate_password, update_env_file, run_artisan, setup_systemd_pteroq, setup_cron, setup_nginx,
    remove_systemd_pteroq, remove_cron, remove_nginx, remove_panel_files, remove_db_user_and_db
)

console = Console()

# TODO: main_menu(), install_pterodactyl(), uninstall_pterodactyl(), diagnose_pterodactyl()
# –í–µ—Å—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª—ë–Ω. –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.

def main_menu():
    while True:
        choice = inquirer.select(
            message="=== Linux Helper: –ú–µ–Ω–µ–¥–∂–µ—Ä Pterodactyl ===",
            choices=[
                {"name": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pterodactyl (–∞–≤—Ç–æ)", "value": "install_auto"},
                {"name": "–£–¥–∞–ª–∏—Ç—å Pterodactyl", "value": "uninstall"},
                {"name": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "value": "diagnose"},
                {"name": "–í—ã—Ö–æ–¥", "value": "exit"},
            ],
            pointer="> ",
            instruction="–°—Ç—Ä–µ–ª–∫–∏ [36m[1m‚Üë‚Üì[0m, Enter ‚Äî –≤—ã–±—Ä–∞—Ç—å"
        ).execute()
        if choice == "install_auto":
            panel_dir = "/var/www/pterodactyl"
            if os.path.exists(panel_dir):
                confirm = inquirer.confirm(
                    message="–ü–∞–Ω–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–¥–∞–ª–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ?",
                    default=False
                ).execute()
                if confirm:
                    uninstall_pterodactyl(console)
                    install_pterodactyl_full_auto(console)
                else:
                    continue
            else:
                install_pterodactyl_full_auto(console)
        elif choice == "uninstall":
            panel_dir = "/var/www/pterodactyl"
            if not os.path.exists(panel_dir):
                console.print(Panel("–ü–∞–Ω–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", title="–ò–Ω—Ñ–æ", border_style="cyan"))
            else:
                uninstall_pterodactyl(console)
        elif choice == "diagnose":
            diagnose_pterodactyl(console)
        else:
            console.print("[bold green]–í—ã—Ö–æ–¥.[/bold green]")
            sys.exit(0)

def diagnose_pterodactyl(console):
    console.print("\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Pterodactyl]")
    log("–°—Ç–∞—Ä—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    check_root()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependencies = [
        ("php", "PHP 8.2/8.3"),
        ("composer", "Composer v2"),
        ("mariadb", "MariaDB"),
        ("nginx", "Nginx"),
        ("redis-server", "Redis"),
        ("git", "git"),
        ("curl", "curl"),
        ("unzip", "unzip"),
        ("tar", "tar")
    ]
    all_ok = True
    for cmd, name in dependencies:
        if not check_dependency(cmd, name):
            all_ok = False
    if not all_ok:
        console.print("[–û–®–ò–ë–ö–ê] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    for port in [80, 443]:
        check_port(port)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–∞–Ω–µ–ª–∏
    panel_dir = "/var/www/pterodactyl"
    if os.path.exists(panel_dir):
        log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–∞–Ω–µ–ª–∏ {panel_dir} –Ω–∞–π–¥–µ–Ω–∞")
        console.print(f"[OK] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–∞–Ω–µ–ª–∏ {panel_dir} –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–∞–Ω–µ–ª–∏ {panel_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        console.print(f"[INFO] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–∞–Ω–µ–ª–∏ {panel_dir} –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd unit pteroq
    pteroq_unit = "/etc/systemd/system/pteroq.service"
    if os.path.exists(pteroq_unit):
        log("systemd unit pteroq.service –Ω–∞–π–¥–µ–Ω")
        console.print("[OK] systemd unit pteroq.service –Ω–∞–π–¥–µ–Ω.")
    else:
        log("systemd unit pteroq.service –Ω–µ –Ω–∞–π–¥–µ–Ω")
        console.print("[INFO] systemd unit pteroq.service –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ).")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏
    try:
        res = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        if '* * * * * php /var/www/pterodactyl/artisan schedule:run' in (res.stdout or ''):
            log("–ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è artisan schedule:run –Ω–∞–π–¥–µ–Ω–∞")
            console.print("[OK] –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è artisan schedule:run –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            log("–ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è artisan schedule:run –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            console.print("[INFO] –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è artisan schedule:run –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ).")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏: {e}", level="ERROR")
        console.print("[–í–ù–ò–ú–ê–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–æ–Ω-–∑–∞–¥–∞—á–∏.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx-–∫–æ–Ω—Ñ–∏–≥–∞
    nginx_conf = "/etc/nginx/sites-available/pterodactyl.conf"
    if os.path.exists(nginx_conf):
        log("nginx-–∫–æ–Ω—Ñ–∏–≥ –Ω–∞–π–¥–µ–Ω")
        console.print("[OK] nginx-–∫–æ–Ω—Ñ–∏–≥ –Ω–∞–π–¥–µ–Ω.")
    else:
        log("nginx-–∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        console.print("[INFO] nginx-–∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ).")
    console.print("\n[–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞]")
    log("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def install_pterodactyl(console):
    console.print("\n[–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pterodactyl Panel]")
    log("–°—Ç–∞—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–Ω–µ–ª–∏")
    check_root()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependencies = [
        ("php", "PHP 8.2/8.3"),
        ("composer", "Composer v2"),
        ("mariadb", "MariaDB"),
        ("nginx", "Nginx"),
        ("redis-server", "Redis"),
        ("git", "git"),
        ("curl", "curl"),
        ("unzip", "unzip"),
        ("tar", "tar")
    ]
    all_ok = True
    for cmd, name in dependencies:
        if not check_dependency(cmd, name):
            all_ok = False
    if not all_ok:
        console.print("[–û–®–ò–ë–ö–ê] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É!")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    for port in [80, 443]:
        check_port(port)
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏
    panel_dir = "/var/www/pterodactyl"
    if os.path.exists(panel_dir):
        console.print(f"[INFO] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {panel_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.")
        log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {panel_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        download_and_extract_panel(panel_dir)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ composer-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.print("[INFO] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π composer...")
    log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π composer...")
    os.system(f"cd {panel_dir} && COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader")
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env
    env_path = os.path.join(panel_dir, ".env")
    env_example = os.path.join(panel_dir, ".env.example")
    if not os.path.exists(env_path) and os.path.exists(env_example):
        shutil.copy(env_example, env_path)
        console.print("[OK] .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example")
        log(".env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example")
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.print("[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    os.system(f"cd {panel_dir} && php artisan key:generate --force")
    console.print("[OK] –ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞—é...")
    log("–ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    # --- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    console.print("[INFO] –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    db_name = "panel"
    db_user = "pterodactyl"
    db_pass = generate_password(16)
    db_host = "127.0.0.1"
    db_port = 3306
    # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ root –±–µ–∑ –ø–∞—Ä–æ–ª—è
    mariadb = MariaDBManager(db_host, "root", None, db_port)
    ok, err = mariadb.create_user_and_db(db_name, db_user, db_pass)
    if not ok and err and '1698' in str(err):
        console.print("[–û–®–ò–ë–ö–ê] MariaDB –Ω–µ –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø root —á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å (auth_socket).\n" \
              "\n–†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ root.\n" \
              "\n1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n" \
              "   sudo mariadb\n" \
              "2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã (–∑–∞–º–µ–Ω–∏—Ç–µ password –Ω–∞ —Å–≤–æ–π —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å):\n" \
              "   CREATE USER 'tempadmin'@'127.0.0.1' IDENTIFIED BY 'password';\n" \
              "   GRANT ALL PRIVILEGES ON *.* TO 'tempadmin'@'127.0.0.1' WITH GRANT OPTION;\n" \
              "   FLUSH PRIVILEGES;\n" \
              "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å MariaDB –Ω–∏–∂–µ.\n")
        log("MariaDB —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ root (auth_socket)", level="ERROR")
        while True:
            login = input("MariaDB –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, tempadmin): ").strip()
            passwd = input("MariaDB –ø–∞—Ä–æ–ª—å: ").strip()
            if not login or not passwd:
                console.print("[–û–®–ò–ë–ö–ê] –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!")
                continue
            mariadb = MariaDBManager(db_host, login, passwd, db_port)
            ok, err = mariadb.create_user_and_db(db_name, db_user, db_pass)
            if ok:
                console.print(f"[OK] –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã: {db_name}, {db_user}")
                log(f"–ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã: {db_name}, {db_user}")
                break
            else:
                console.print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {err}")
                log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {err}", level="ERROR")
                retry = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ").strip().lower()
                if retry != 'y':
                    console.print("[–û–®–ò–ë–ö–ê] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é.")
                    return
    elif not ok:
        console.print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {err}")
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ë–î/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {err}", level="ERROR")
        return
    else:
        console.print(f"[OK] –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã: {db_name}, {db_user}")
        log(f"–ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã: {db_name}, {db_user}")
    # --- –ó–∞–ø–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ .env ---
    update_env_file(env_path, {
        "DB_HOST": db_host,
        "DB_PORT": str(db_port),
        "DB_DATABASE": db_name,
        "DB_USERNAME": db_user,
        "DB_PASSWORD": db_pass
    })
    console.print("[OK] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î –∑–∞–ø–∏—Å–∞–Ω—ã –≤ .env")
    log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î –∑–∞–ø–∏—Å–∞–Ω—ã –≤ .env")
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---
    mariadb2 = MariaDBManager(db_host, db_user, db_pass, db_port)
    ok, err = mariadb2.test_connection(db_name)
    if not ok:
        console.print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {err}")
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {err}", level="ERROR")
        return
    console.print("[OK] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
    log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
    # --- Artisan setup (–æ–∫—Ä—É–∂–µ–Ω–∏–µ, –±–∞–∑–∞, –ø–æ—á—Ç–∞) ---
    console.print("[INFO] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏...")
    run_artisan(panel_dir, "p:environment:setup", [
        f"--author=admin@localhost",
        f"--url=http://localhost",
        f"--timezone=UTC",
        f"--cache=file",
        f"--session=file",
        f"--queue=redis",
        f"--redis-host=127.0.0.1",
        f"--redis-port=6379",
        f"--redis-pass=",
        f"--settings-ui=false",
        f"--telemetry=true"
    ])
    run_artisan(panel_dir, "p:environment:database", [
        f"--host={db_host}",
        f"--port={db_port}",
        f"--database={db_name}",
        f"--username={db_user}",
        f"--password={db_pass}"
    ])
    run_artisan(panel_dir, "p:environment:mail", [
        f"--driver=smtp",
        f"--email=no-reply@localhost",
        f"--from=Pterodactyl Panel",
        f"--host=localhost",
        f"--port=25",
        f"--username=",
        f"--password=",
        f"--encryption=",
    ])
    # --- –ú–∏–≥—Ä–∞—Ü–∏—è –∏ seed ---
    console.print("[INFO] –ú–∏–≥—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã...")
    run_artisan(panel_dir, "migrate", ["--seed", "--force"])
    # --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    console.print("[INFO] –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    admin_email = f"admin@localhost"
    admin_user = "admin"
    admin_pass = generate_password(12)
    run_artisan(panel_dir, "p:user:make", [
        f"--email={admin_email}",
        f"--username={admin_user}",
        f"--name-first=Admin",
        f"--name-last=Admin",
        f"--password={admin_pass}",
        f"--admin=1"
    ])
    console.print(f"[OK] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {admin_email} / {admin_pass}")
    log(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {admin_email}")
    # --- –ü—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫–∏ ---
    console.print("[INFO] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –ø–∞–ø–∫–∏...")
    os.system(f"chown -R www-data:www-data {panel_dir}")
    # --- Systemd unit pteroq ---
    setup_systemd_pteroq(panel_dir)
    # --- –ö—Ä–æ–Ω ---
    setup_cron(panel_dir)
    # --- Nginx ---
    setup_nginx(panel_dir)
    console.print("\n[–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!]")
    console.print(f"–ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost (–∏–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω)")
    console.print(f"–õ–æ–≥–∏–Ω: {admin_email}")
    console.print(f"–ü–∞—Ä–æ–ª—å: {admin_pass}")
    console.print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
    log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

def install_pterodactyl_full_auto(console):
    console.print(Panel("[bold cyan]–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Pterodactyl[/bold cyan]", title="–°—Ç–∞—Ä—Ç", border_style="cyan"))
    check_root()
    # 1. apt update –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pkgs = [
        "software-properties-common", "curl", "apt-transport-https", "ca-certificates", "gnupg",
        "php8.3", "php8.3-common", "php8.3-cli", "php8.3-gd", "php8.3-mysql", "php8.3-mbstring", "php8.3-bcmath", "php8.3-xml", "php8.3-fpm", "php8.3-curl", "php8.3-zip",
        "mariadb-server", "nginx", "tar", "unzip", "git", "redis-server"
    ]
    console.print("[cyan]–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ apt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...[/cyan]")
    subprocess.run(["apt", "update"], check=True)
    subprocess.run(["apt", "install", "-y"] + pkgs, check=True)
    # Composer
    if not shutil.which("composer"):
        console.print("[cyan]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ composer...[/cyan]")
        subprocess.run("curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer", shell=True, check=True)
    # 2. MariaDB: tempadmin –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.print("[cyan]–ü—Ä–æ–≤–µ—Ä–∫–∞ MariaDB –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...[/cyan]")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_socket
    auth_socket = False
    try:
        out = subprocess.check_output(["sudo", "mariadb", "-e", "SELECT plugin FROM mysql.user WHERE User='root';"]).decode()
        if "auth_socket" in out:
            auth_socket = True
    except Exception:
        pass
    db_name = "panel"
    db_user = "pterodactyl"
    db_pass = generate_password(16)
    db_host = "127.0.0.1"
    db_port = 3306
    tempadmin = False
    tempadmin_user = "tempadmin"
    tempadmin_pass = generate_password(16)
    if auth_socket:
        console.print("[yellow]MariaDB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç auth_socket. –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tempadmin...[/yellow]")
        sql = f"CREATE USER IF NOT EXISTS '{tempadmin_user}'@'127.0.0.1' IDENTIFIED BY '{tempadmin_pass}'; GRANT ALL PRIVILEGES ON *.* TO '{tempadmin_user}'@'127.0.0.1' WITH GRANT OPTION; FLUSH PRIVILEGES;"
        subprocess.run(["sudo", "mariadb", "-e", sql], check=True)
        tempadmin = True
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑—É –¥–ª—è –ø–∞–Ω–µ–ª–∏
    sql = f"CREATE USER IF NOT EXISTS '{db_user}'@'127.0.0.1' IDENTIFIED BY '{db_pass}'; CREATE DATABASE IF NOT EXISTS {db_name}; GRANT ALL PRIVILEGES ON {db_name}.* TO '{db_user}'@'127.0.0.1' WITH GRANT OPTION; FLUSH PRIVILEGES;"
    if tempadmin:
        subprocess.run(["mariadb", "-u", tempadmin_user, f"-p{tempadmin_pass}", "-e", sql], check=True)
    else:
        subprocess.run(["sudo", "mariadb", "-e", sql], check=True)
    console.print(Panel(f"–ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω—ã: [green]{db_name}[/green] / [green]{db_user}[/green]", title="MariaDB", border_style="green"))
    # 3. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏
    panel_dir = "/var/www/pterodactyl"
    if not os.path.exists(panel_dir):
        os.makedirs(panel_dir, exist_ok=True)
    console.print("[cyan]–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏...[/cyan]")
    subprocess.run(["curl", "-Lo", f"{panel_dir}/panel.tar.gz", "https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz"], check=True)
    subprocess.run(["tar", "-xzvf", f"{panel_dir}/panel.tar.gz", "-C", panel_dir], check=True)
    subprocess.run(["chmod", "-R", "755", f"{panel_dir}/storage", f"{panel_dir}/bootstrap/cache/"], check=True)
    # 4. Composer install
    subprocess.run(["composer", "install", "--no-dev", "--optimize-autoloader"], cwd=panel_dir, check=True)
    # 5. .env –∏ –∫–ª—é—á
    env_path = os.path.join(panel_dir, ".env")
    env_example = os.path.join(panel_dir, ".env.example")
    if not os.path.exists(env_path) and os.path.exists(env_example):
        shutil.copy(env_example, env_path)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î
    update_env_file(env_path, {
        "DB_HOST": db_host,
        "DB_PORT": str(db_port),
        "DB_DATABASE": db_name,
        "DB_USERNAME": db_user,
        "DB_PASSWORD": db_pass
    })
    subprocess.run(["php", "artisan", "key:generate", "--force"], cwd=panel_dir, check=True)
    # 6. Artisan setup
    subprocess.run(["php", "artisan", "p:environment:setup", "--author=admin@localhost", "--url=http://localhost", "--timezone=UTC", "--cache=file", "--session=file", "--queue=redis", "--redis-host=127.0.0.1", "--redis-port=6379", "--redis-pass=", "--settings-ui=false", "--telemetry=true"], cwd=panel_dir, check=True)
    subprocess.run(["php", "artisan", "p:environment:database", f"--host={db_host}", f"--port={db_port}", f"--database={db_name}", f"--username={db_user}", f"--password={db_pass}"], cwd=panel_dir, check=True)
    subprocess.run(["php", "artisan", "p:environment:mail", "--driver=smtp", "--email=no-reply@localhost", "--from=Pterodactyl Panel", "--host=localhost", "--port=25", "--username=", "--password=", "--encryption="], cwd=panel_dir, check=True)
    # 7. –ú–∏–≥—Ä–∞—Ü–∏—è –∏ –∞–¥–º–∏–Ω
    subprocess.run(["php", "artisan", "migrate", "--seed", "--force"], cwd=panel_dir, check=True)
    admin_email = "admin@localhost"
    admin_user = "admin"
    admin_pass = generate_password(12)
    subprocess.run(["php", "artisan", "p:user:make", f"--email={admin_email}", f"--username={admin_user}", f"--name-first=Admin", f"--name-last=Admin", f"--password={admin_pass}", f"--admin=1"], cwd=panel_dir, check=True)
    # 8. –ü—Ä–∞–≤–∞
    subprocess.run(["chown", "-R", "www-data:www-data", panel_dir], check=True)
    # 9. Systemd unit
    setup_systemd_pteroq(panel_dir)
    # 10. –ö—Ä–æ–Ω
    setup_cron(panel_dir)
    # 11. Nginx
    setup_nginx(panel_dir)
    # 12. –§–∏–Ω–∞–ª
    console.print(Panel(f"[bold green]–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]\n–ü–∞–Ω–µ–ª—å: http://localhost (–∏–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω)\n–õ–æ–≥–∏–Ω: {admin_email}\n–ü–∞—Ä–æ–ª—å: {admin_pass}", title="–ì–æ—Ç–æ–≤–æ!", border_style="green"))
    log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

def uninstall_pterodactyl(console):
    console.print("\n[–£–¥–∞–ª–µ–Ω–∏–µ Pterodactyl Panel]")
    log("–°—Ç–∞—Ä—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏")
    check_root()
    panel_dir = "/var/www/pterodactyl"
    env_path = os.path.join(panel_dir, ".env")
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å systemd unit pteroq
    remove_systemd_pteroq()
    # 2. –£–¥–∞–ª–∏—Ç—å –∫—Ä–æ–Ω-–∑–∞–¥–∞—á—É
    remove_cron(panel_dir)
    # 3. –£–¥–∞–ª–∏—Ç—å nginx-–∫–æ–Ω—Ñ–∏–≥
    remove_nginx()
    # 4. –£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if os.path.exists(env_path):
        from modules.utils.pterodactyl_utils import get_db_params_from_env
        db_params = get_db_params_from_env(env_path)
        if db_params:
            remove_db_user_and_db(**db_params)
    # 5. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø–∞–Ω–µ–ª–∏
    remove_panel_files(panel_dir)
    console.print("[OK] –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    log("–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    main_menu()